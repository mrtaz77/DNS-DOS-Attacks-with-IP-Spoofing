#!/usr/bin/env python3
"""
Secondary Server Manual Demo
Demonstrates:
1. Secondary server configuration with automatic zone sync
2. UPDATE forwarding from secondary to primary
3. Proper DNS hierarchy architecture
"""

import subprocess
import time
import sys

def main():
    print("üîÑ Secondary DNS Server Architecture Demo")
    print("=" * 50)
    
    print("\nüìã ARCHITECTURE OVERVIEW:")
    print("1. PRIMARY servers accept UPDATEs and manage authoritative data")
    print("2. SECONDARY servers sync from primary via AXFR/IXFR")
    print("3. UPDATEs to secondary are forwarded to primary")
    print("4. Automatic periodic zone refresh ensures consistency")
    
    print(f"\nüöÄ STARTING SECONDARY SERVER...")
    print("Command:")
    print("python -m dns_server.main \\")
    print("  --zone dns_server/zones/secondary.zone \\")
    print("  --addr 127.0.0.1 \\")
    print("  --port-udp 8353 --port-tcp 8354 \\")
    print("  --secondary \\")
    print("  --primary-server 127.0.0.1 \\") 
    print("  --primary-port 6354 \\")
    print("  --refresh-interval 120 \\")
    print("  --tsig-name test-key \\")
    print("  --tsig-secret dGVzdGtleXNlY3JldDEyMzQ1Njc4OTBhYmNkZWZnaGlqaw==")
    
    print(f"\n‚è±Ô∏è  Starting server (will run for 30 seconds)...")
    
    try:
        proc = subprocess.Popen([
            'python', '-m', 'dns_server.main',
            '--zone', 'dns_server/zones/secondary.zone',
            '--addr', '127.0.0.1',
            '--port-udp', '8353',
            '--port-tcp', '8354', 
            '--secondary',
            '--primary-server', '127.0.0.1',
            '--primary-port', '6354',
            '--refresh-interval', '120',
            '--tsig-name', 'test-key',
            '--tsig-secret', 'dGVzdGtleXNlY3JldDEyMzQ1Njc4OTBhYmNkZWZnaGlqaw=='
        ], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        
        print("‚úÖ Secondary server started")
        print("\nüìä Server logs (first 10 seconds):")
        
        # Capture initial logs
        start_time = time.time()
        while time.time() - start_time < 10:
            line = proc.stderr.readline()
            if line:
                print(f"  {line.strip()}")
            if proc.poll() is not None:
                break
        
        if proc.poll() is None:
            print(f"\nüß™ TESTING SECONDARY SERVER...")
            
            # Test basic query
            print("1. Testing basic DNS query to secondary:")
            result = subprocess.run("dig @127.0.0.1 -p 8353 www.example.com A +short", 
                                   shell=True, capture_output=True, text=True, timeout=5)
            if result.returncode == 0:
                print(f"   ‚úÖ www.example.com A: {result.stdout.strip()}")
            else:
                print(f"   ‚ùå Query failed")
            
            # Test record that should sync from primary
            print("2. Testing record synced from primary:")
            result = subprocess.run("dig @127.0.0.1 -p 8353 newhost.example.com A +short", 
                                   shell=True, capture_output=True, text=True, timeout=5)
            if result.returncode == 0:
                print(f"   ‚úÖ newhost.example.com A: {result.stdout.strip()}")
            else:
                print(f"   ‚ùå Query failed")
            
            print(f"\n‚è≥ Letting server run for 20 more seconds...")
            print("   (Watch for zone refresh messages)")
            
            # Wait and capture more logs
            end_time = time.time() + 20
            while time.time() < end_time and proc.poll() is None:
                line = proc.stderr.readline()
                if line and any(keyword in line.lower() for keyword in 
                              ['refresh', 'transfer', 'update', 'forward']):
                    print(f"  üìù {line.strip()}")
                time.sleep(0.1)
        
        print(f"\nüõë Stopping secondary server...")
        proc.terminate()
        proc.wait(timeout=5)
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        if 'proc' in locals():
            proc.terminate()
        return False
    
    print(f"\n‚úÖ SECONDARY SERVER ARCHITECTURE DEMONSTRATED!")
    print(f"\nüìù KEY FEATURES IMPLEMENTED:")
    print("‚úÖ Secondary server uses secondary.zone file")
    print("‚úÖ Automatic zone synchronization from primary")
    print("‚úÖ TSIG authentication for zone transfers") 
    print("‚úÖ UPDATE forwarding capability")
    print("‚úÖ Periodic zone refresh mechanism")
    print("‚úÖ Proper DNS hierarchy separation")
    
    print(f"\nüîß MANUAL TESTING:")
    print("1. Start secondary server with the command above")
    print("2. Send queries to port 8353 - should work normally") 
    print("3. Send UPDATEs to port 8354 - should forward to primary")
    print("4. Check zone files for automatic synchronization")
    print("5. Monitor logs for refresh and transfer activities")
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
